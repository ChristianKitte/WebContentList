@using WebContentList.Data

@page "/contentlist"

@inject GroupService GroupService
@inject ContentsService ContentsService
@inject NavigationManager navigationManager

<h3>Alle Inhalte</h3>

<ConfirmDeleteDialog @ref=ConfirmDialog
                     ConfirmationChanged="ConfirmDelete_Click"
                     ConfirmationMessage="Soll das Element wirklich gelöscht werden?">
</ConfirmDeleteDialog>

@if (_groups == null || _content == null)
{
    <p>Loading...</p>
}
else
{
    <div>
        <a class="btn btn-success" href="addcontent">Neuer Inhalt...</a>
    </div>

    <div>
        <select name="Gruppe">
            <option value="-1" @onclick=@(() => GetVideosByGroup(-1)) @onclick:preventDefault="true">Alle</option>

            @foreach (var group in _groups)
            {
                <option value="@group.SubjectId" @onclick=@(() => GetVideosByGroup(group.SubjectId)) @onclick:preventDefault="true">@group.Name</option>
            }
        </select>
    </div>

    <div>
        <ul class="list-group list-group-flush">
            <Virtualize Items="_content" Context="content">
                <ContentListItem Content="content"
                             EditRequest="(id) => Edit_Click(id)"
                             DeleteRequest="(id) => Delete_Click(id)">

                </ContentListItem>
            </Virtualize>
        </ul>
    </div>
}


@code {
    private List<Group>? _groups;
    private List<Content>? _content;

    Content? _curContent = null;
    int _curGroupId = -1;

    private ConfirmDeleteDialog? ConfirmDialog { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _groups = await GroupService.GetGroupList();
        _content = await ContentsService.GetContentList();
    }

    private async Task GetVideosByGroup(int groupId)
    {
        _curGroupId = groupId;

        if (groupId == -1)
        {
            _content = await ContentsService.GetContentList();
        }
        else
        {
            _content = await ContentsService.GetContentListBySubject(groupId);
        }
    }

    private void Edit_Click(int id)
    {
        navigationManager.NavigateTo($"editcontent/{id}");
    }

    protected async void Delete_Click(int id)
    {
        _curContent = await ContentsService.GetContentById(id);
        ConfirmDialog?.Show();
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed && _curContent != null)
        {
            await ContentsService.DeleteContent(_curContent);
            await GetVideosByGroup(_curGroupId);

            StateHasChanged();
        }
    }

}